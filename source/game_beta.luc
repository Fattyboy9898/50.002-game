module game_beta (
    input clk,  // clock
    input rst,  // reset

    
    input button1_in,
    input button2_in,
    
    output decimal_counter_decrease,
    output decimal_counter_rst,
    output debug_state[6],
    output debug_timer[6],
    output debug_countdown_timer[6],
    output debug_timer_easy[6],
    output debug_timer_medium[6],
    output debug_timer_hard[6]
    //output b1_out[16],
    //output b2_out[16],
    //output debug_slowclk

  ) 


{
  
    //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  sig to_alufn_out[6];

  alu game_alu;
  
  .clk(clk){
  
    //EDGE DETECTOR FOR BUTTONS
    //edge_detector edge_detector_button1(#RISE(#1),#FALL(0));
    //edge_detector edge_detector_button2(#RISE(#1),#FALL(0));
    
    edge_detector edge_detector_st_easy(#RISE(1), #FALL(0));
    edge_detector edge_detector_st_med(#RISE(1), # FALL(0));
    edge_detector edge_detectoR_st_hard(#RISE(1), #FALL(0));
    
    edge_detector game_timer_detector(#RISE(1), #FALL(0));
    
    
      .rst(rst){
        game_cu game_controlUnit;
        game_regfiles game_regFile;
      
        counter easy_timer(#SIZE(1),#DIV(26));
        counter medium_timer(#SIZE(1),#DIV(25));
        counter hard_timer(#SIZE(1),#DIV(24));
        counter timer(#SIZE(1),#DIV(26));
    }
  }

  always {
    //EDGE DETECTORS
    game_timer_detector.in = timer.value;
    edge_detector_st_easy.in = easy_timer.value;
    edge_detector_st_med.in = medium_timer.value;
    edge_detectoR_st_hard.in = hard_timer.value;
    
    //setting up control unit
    game_controlUnit.button1 = button1_in;
    game_controlUnit.button2 = button2_in;
    
    //output of cu to increase 7 seven_seg
    decimal_counter_decrease = game_controlUnit.decimal_counter_decrease;
    decimal_counter_rst = game_controlUnit.decimal_counter_rst;
    
    //debug state output 
    debug_state = game_controlUnit.debug_state;
    debug_timer =  game_timer_detector.out;
    debug_countdown_timer = timer.value;
    debug_timer_easy = easy_timer.value;
    debug_timer_medium = medium_timer.value;
    debug_timer_hard = hard_timer.value;
    
    game_controlUnit.st = game_timer_detector.out;
    game_controlUnit.st_easy = edge_detector_st_easy.out;
    game_controlUnit.st_med = edge_detector_st_med.out;
    game_controlUnit.st_hard = edge_detectoR_st_hard.out;
    
    inputAlu_a=0;
    inputAlu_b=0;
    to_alufn_out=0;
    //alu
    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn = game_controlUnit.alufn;
    
    //setup  regfile unit
    game_regFile.we = game_controlUnit.we;
    game_regFile.read_address_a = game_controlUnit.regfile_read_address_a;
    game_regFile.read_address_b = game_controlUnit.regfile_read_address_b;
    game_regFile.read_address_o = game_controlUnit.regfile_read_address_o;
    game_regFile.write_address = game_controlUnit.regfile_write_address;
    
    //bootstrap reg b output to cu for convenient branching conditions
    game_controlUnit.regfile_data_in = game_regFile.out_b;
    
    //asel mux
    case(game_controlUnit.asel){
      b00 : inputAlu_a = game_regFile.out_a; // reg file data
      b01 : inputAlu_a = h0;
      b10 : inputAlu_a = h1;
      b01 : inputAlu_a = h2;
    }
    //bsel mux
    case(game_controlUnit.bsel) {
      b000 : inputAlu_b = game_regFile.out_b;
      b001 : inputAlu_b = ha;
      b010 : inputAlu_b = h14;
      b011 : inputAlu_b = h1e;
      b100 : inputAlu_b = h200;
      b101 : inputAlu_b = h5;
      b110 : inputAlu_b = h63;
      b111 : inputAlu_b = h0;
    }
    //wdsel
    case(game_controlUnit.alufn_sel) {
      b00 : game_regFile.data= game_alu.alu;
      b01 : game_regFile.data = 0;//rng data 
      b10 : game_regFile.data = h3c;
      b11 : game_regFile.data = h0;
      default: game_regFile.data = game_alu.alu;
    }
    
    //to_alufn mux
    case(game_controlUnit.to_alufn){
      b00 : game_alu.alufn = 6b000000;
      b01 : game_alu.alufn = 6b000001;
      b10 : game_alu.alufn = 6b000010;
      b11 : game_alu.alufn = game_regFile.out_o;
    }
    // alufn_sel mux 
    case(game_controlUnit.alufn_sel){
      b0 : game_alu.alufn = game_controlUnit.alufn;  
    }

    
  }
}
