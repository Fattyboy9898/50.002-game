module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    
    
    output io_led [3][8],   // LEDs on IO Shield  // LEDs on IO Shield, 3 outputs connected to pins 15,16,17 from FPGA (inputs Cin, A, B into Full Adder)
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield up-0,centre-1, bottom-2, left-3, right-4
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  sig a[16];
  sig b[16];
  sig alufn[6];
  sig rst;                  // reset signal
   
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    edge_detector edge_detector_button1 (#RISE(1), #FALL(0));
    edge_detector edge_detector_button2 (#RISE(1), #FALL(0));
    
    button_conditioner btn_cond_1;
    button_conditioner btn_cond_2;
    
    .rst(rst) {
      game_beta gameMachine;
      multi_seven_seg seg;
      
    }
  }

  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = ~seg.seg;          // connect segment to driver
    io_sel = ~seg.sel;           // connect digit to driver
    seg.values = {4h0,4h0,4h0,4h0}; // 4digits default seven seg display
    
    //btn set up
    btn_cond_1.in = io_button[4];
    btn_cond_2.in = io_button[3];
    edge_detector_button1.in = btn_cond_1.out;
    edge_detector_button2.in = btn_cond_2.out;
    
    //game machine set up
    gameMachine.button1_in = edge_detector_button1.out;
    gameMachine.button2_in = edge_detector_button2.out;
    
    io_led[0] = gameMachine.debug_state;
    io_led[1] = gameMachine.debug_timer;

        
      
  }
}