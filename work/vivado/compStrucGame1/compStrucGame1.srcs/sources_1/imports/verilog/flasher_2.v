/*
   This file was generated automatically by Alchitry Labs version 1.2.0.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module flasher_2 (
    input clk,
    output reg [9:0] led
  );
  
  
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_3 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .alu(M_alu_alu),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  reg rst;
  
  localparam PLAYLEFT_state = 1'd0;
  localparam PLAYRIGHT_state = 1'd1;
  
  reg M_state_d, M_state_q = PLAYLEFT_state;
  reg [15:0] M_aVal_d, M_aVal_q = 1'h0;
  reg [15:0] M_bVal_d, M_bVal_q = 1'h0;
  wire [5-1:0] M_delayer_value;
  delayer_4 delayer (
    .clk(clk),
    .rst(rst),
    .value(M_delayer_value)
  );
  
  reg [15:0] a;
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  always @* begin
    M_state_d = M_state_q;
    M_bVal_d = M_bVal_q;
    M_aVal_d = M_aVal_q;
    
    a = 1'h0;
    b = 1'h0;
    M_alu_a = a;
    M_alu_b = b;
    alufn = 6'h20;
    M_alu_alufn = alufn;
    led = M_alu_alu[0+9-:10];
    
    case (M_state_q)
      PLAYLEFT_state: begin
        M_bVal_d = M_delayer_value;
        if (M_bVal_q != 5'h14) begin
          alufn = 6'h20;
          M_aVal_d = 1'h1;
          M_alu_a = M_aVal_q;
          M_alu_b = M_bVal_q;
          M_alu_alufn = alufn;
          led = M_alu_alu[0+9-:10];
          if (M_bVal_q == 4'ha) begin
            M_state_d = PLAYRIGHT_state;
          end
        end
      end
      PLAYRIGHT_state: begin
        M_bVal_d = M_delayer_value;
        b = M_bVal_q;
        M_alu_a = 9'h100;
        M_alu_b = M_bVal_q - 4'ha;
        M_alu_alufn = 6'h21;
        led = M_alu_alu[0+9-:10];
        if (M_bVal_q == 5'h14) begin
          M_state_d = PLAYLEFT_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_aVal_q <= M_aVal_d;
    M_bVal_q <= M_bVal_d;
    M_state_q <= M_state_d;
  end
  
endmodule
