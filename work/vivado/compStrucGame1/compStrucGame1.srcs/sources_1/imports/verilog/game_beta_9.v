/*
   This file was generated automatically by Alchitry Labs version 1.2.0.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_beta_9 (
    input clk,
    input rst,
    input [0:0] button1_in,
    input [0:0] button2_in,
    output reg [6:0] operand1,
    output reg [6:0] operand2,
    output reg [1:0] operation,
    output reg [5:0] countdown_timer,
    output reg [6:0] score,
    output reg [12:0] answer,
    output reg [3:0] moduloAns,
    output reg [2:0] scoreTimer,
    output reg [9:0] ledValue,
    output reg decimal_counter_decrease,
    output reg decimal_counter_rst,
    output reg [5:0] debug_state,
    output reg [5:0] debug_timer,
    output reg [5:0] debug_countdown_timer,
    output reg [5:0] debug_timer_easy,
    output reg [5:0] debug_timer_medium,
    output reg [5:0] debug_timer_hard,
    output reg [3:0] debug_ra,
    output reg [3:0] debug_rb,
    output reg [3:0] debug_wa,
    output reg [15:0] debug_register
  );
  
  
  
  reg [15:0] inputAlu_a;
  
  reg [15:0] inputAlu_b;
  
  reg [5:0] to_alufn_out;
  
  wire [16-1:0] M_game_alu_alu;
  wire [1-1:0] M_game_alu_z;
  wire [1-1:0] M_game_alu_v;
  wire [1-1:0] M_game_alu_n;
  reg [16-1:0] M_game_alu_a;
  reg [16-1:0] M_game_alu_b;
  reg [6-1:0] M_game_alu_alufn;
  alu_15 game_alu (
    .a(M_game_alu_a),
    .b(M_game_alu_b),
    .alufn(M_game_alu_alufn),
    .alu(M_game_alu_alu),
    .z(M_game_alu_z),
    .v(M_game_alu_v),
    .n(M_game_alu_n)
  );
  
  wire [1-1:0] M_game_timer_detector_out;
  reg [1-1:0] M_game_timer_detector_in;
  edge_detector_6 game_timer_detector (
    .clk(clk),
    .in(M_game_timer_detector_in),
    .out(M_game_timer_detector_out)
  );
  wire [1-1:0] M_game_easy_detector_out;
  reg [1-1:0] M_game_easy_detector_in;
  edge_detector_6 game_easy_detector (
    .clk(clk),
    .in(M_game_easy_detector_in),
    .out(M_game_easy_detector_out)
  );
  wire [1-1:0] M_game_medium_detector_out;
  reg [1-1:0] M_game_medium_detector_in;
  edge_detector_6 game_medium_detector (
    .clk(clk),
    .in(M_game_medium_detector_in),
    .out(M_game_medium_detector_out)
  );
  wire [1-1:0] M_game_hard_detector_out;
  reg [1-1:0] M_game_hard_detector_in;
  edge_detector_6 game_hard_detector (
    .clk(clk),
    .in(M_game_hard_detector_in),
    .out(M_game_hard_detector_out)
  );
  wire [1-1:0] M_game_controlUnit_decimal_counter_decrease;
  wire [1-1:0] M_game_controlUnit_decimal_counter_rst;
  wire [6-1:0] M_game_controlUnit_alufn;
  wire [3-1:0] M_game_controlUnit_asel;
  wire [3-1:0] M_game_controlUnit_bsel;
  wire [2-1:0] M_game_controlUnit_to_alufn;
  wire [2-1:0] M_game_controlUnit_alufn_sel;
  wire [6-1:0] M_game_controlUnit_regfile_write_address;
  wire [6-1:0] M_game_controlUnit_regfile_read_address_a;
  wire [6-1:0] M_game_controlUnit_regfile_read_address_b;
  wire [6-1:0] M_game_controlUnit_regfile_read_address_o;
  wire [1-1:0] M_game_controlUnit_we;
  wire [2-1:0] M_game_controlUnit_wdsel;
  wire [6-1:0] M_game_controlUnit_debug_state;
  reg [1-1:0] M_game_controlUnit_button1;
  reg [1-1:0] M_game_controlUnit_button2;
  reg [16-1:0] M_game_controlUnit_regfile_data_in;
  reg [1-1:0] M_game_controlUnit_st_easy;
  reg [1-1:0] M_game_controlUnit_st_med;
  reg [1-1:0] M_game_controlUnit_st_hard;
  reg [1-1:0] M_game_controlUnit_st;
  reg [1-1:0] M_game_controlUnit_rng_rdy;
  reg [1-1:0] M_game_controlUnit_rng_rdy2;
  game_cu_16 game_controlUnit (
    .clk(clk),
    .rst(rst),
    .button1(M_game_controlUnit_button1),
    .button2(M_game_controlUnit_button2),
    .regfile_data_in(M_game_controlUnit_regfile_data_in),
    .st_easy(M_game_controlUnit_st_easy),
    .st_med(M_game_controlUnit_st_med),
    .st_hard(M_game_controlUnit_st_hard),
    .st(M_game_controlUnit_st),
    .rng_rdy(M_game_controlUnit_rng_rdy),
    .rng_rdy2(M_game_controlUnit_rng_rdy2),
    .decimal_counter_decrease(M_game_controlUnit_decimal_counter_decrease),
    .decimal_counter_rst(M_game_controlUnit_decimal_counter_rst),
    .alufn(M_game_controlUnit_alufn),
    .asel(M_game_controlUnit_asel),
    .bsel(M_game_controlUnit_bsel),
    .to_alufn(M_game_controlUnit_to_alufn),
    .alufn_sel(M_game_controlUnit_alufn_sel),
    .regfile_write_address(M_game_controlUnit_regfile_write_address),
    .regfile_read_address_a(M_game_controlUnit_regfile_read_address_a),
    .regfile_read_address_b(M_game_controlUnit_regfile_read_address_b),
    .regfile_read_address_o(M_game_controlUnit_regfile_read_address_o),
    .we(M_game_controlUnit_we),
    .wdsel(M_game_controlUnit_wdsel),
    .debug_state(M_game_controlUnit_debug_state)
  );
  wire [16-1:0] M_game_regFile_out_a;
  wire [16-1:0] M_game_regFile_out_b;
  wire [6-1:0] M_game_regFile_out_o;
  wire [4-1:0] M_game_regFile_debug_out_write_address;
  wire [4-1:0] M_game_regFile_debug_out_ra;
  wire [4-1:0] M_game_regFile_debug_out_rb;
  wire [16-1:0] M_game_regFile_debug_out_register;
  wire [7-1:0] M_game_regFile_operand1_out;
  wire [7-1:0] M_game_regFile_operand2_out;
  wire [2-1:0] M_game_regFile_operation_out;
  wire [6-1:0] M_game_regFile_countdown_timer_out;
  wire [7-1:0] M_game_regFile_score_out;
  wire [13-1:0] M_game_regFile_answer_out;
  wire [4-1:0] M_game_regFile_moduloAns_out;
  wire [3-1:0] M_game_regFile_scoreTimter_out;
  wire [10-1:0] M_game_regFile_ledvalue_out;
  reg [1-1:0] M_game_regFile_we;
  reg [4-1:0] M_game_regFile_read_address_a;
  reg [4-1:0] M_game_regFile_read_address_b;
  reg [4-1:0] M_game_regFile_read_address_o;
  reg [4-1:0] M_game_regFile_write_address;
  reg [16-1:0] M_game_regFile_data;
  game_regfiles_17 game_regFile (
    .clk(clk),
    .rst(rst),
    .we(M_game_regFile_we),
    .read_address_a(M_game_regFile_read_address_a),
    .read_address_b(M_game_regFile_read_address_b),
    .read_address_o(M_game_regFile_read_address_o),
    .write_address(M_game_regFile_write_address),
    .data(M_game_regFile_data),
    .out_a(M_game_regFile_out_a),
    .out_b(M_game_regFile_out_b),
    .out_o(M_game_regFile_out_o),
    .debug_out_write_address(M_game_regFile_debug_out_write_address),
    .debug_out_ra(M_game_regFile_debug_out_ra),
    .debug_out_rb(M_game_regFile_debug_out_rb),
    .debug_out_register(M_game_regFile_debug_out_register),
    .operand1_out(M_game_regFile_operand1_out),
    .operand2_out(M_game_regFile_operand2_out),
    .operation_out(M_game_regFile_operation_out),
    .countdown_timer_out(M_game_regFile_countdown_timer_out),
    .score_out(M_game_regFile_score_out),
    .answer_out(M_game_regFile_answer_out),
    .moduloAns_out(M_game_regFile_moduloAns_out),
    .scoreTimter_out(M_game_regFile_scoreTimter_out),
    .ledvalue_out(M_game_regFile_ledvalue_out)
  );
  wire [1-1:0] M_rngGen_rng_ready;
  wire [7-1:0] M_rngGen_out;
  rngGenerator_18 rngGen (
    .clk(clk),
    .rst(rst),
    .rng_ready(M_rngGen_rng_ready),
    .out(M_rngGen_out)
  );
  wire [1-1:0] M_rngGen2_rng_ready;
  wire [7-1:0] M_rngGen2_out;
  rngGenerator2_19 rngGen2 (
    .clk(clk),
    .rst(rst),
    .rng_ready(M_rngGen2_rng_ready),
    .out(M_rngGen2_out)
  );
  wire [1-1:0] M_easy_timer_value;
  counter_20 easy_timer (
    .clk(clk),
    .rst(rst),
    .value(M_easy_timer_value)
  );
  wire [1-1:0] M_medium_timer_value;
  counter_21 medium_timer (
    .clk(clk),
    .rst(rst),
    .value(M_medium_timer_value)
  );
  wire [1-1:0] M_hard_timer_value;
  counter_22 hard_timer (
    .clk(clk),
    .rst(rst),
    .value(M_hard_timer_value)
  );
  wire [1-1:0] M_timer_value;
  counter_23 timer (
    .clk(clk),
    .rst(rst),
    .value(M_timer_value)
  );
  
  always @* begin
    M_game_controlUnit_button1 = button1_in;
    M_game_controlUnit_button2 = button2_in;
    M_game_controlUnit_rng_rdy = M_rngGen_rng_ready;
    M_game_controlUnit_rng_rdy2 = M_rngGen2_rng_ready;
    decimal_counter_decrease = M_game_controlUnit_decimal_counter_decrease;
    decimal_counter_rst = M_game_controlUnit_decimal_counter_rst;
    debug_ra = M_game_regFile_debug_out_ra;
    debug_rb = M_game_regFile_debug_out_rb;
    debug_wa = M_game_regFile_debug_out_write_address;
    debug_register = M_game_regFile_debug_out_register;
    debug_state = M_game_controlUnit_debug_state;
    debug_timer = M_timer_value;
    debug_countdown_timer = M_timer_value;
    debug_timer_easy = M_easy_timer_value;
    debug_timer_medium = M_medium_timer_value;
    debug_timer_hard = M_hard_timer_value;
    M_game_easy_detector_in = M_easy_timer_value;
    M_game_medium_detector_in = M_medium_timer_value;
    M_game_hard_detector_in = M_hard_timer_value;
    M_game_timer_detector_in = M_timer_value;
    M_game_controlUnit_st = M_game_timer_detector_out;
    M_game_controlUnit_st_easy = M_game_easy_detector_out;
    M_game_controlUnit_st_med = M_game_medium_detector_out;
    M_game_controlUnit_st_hard = M_game_hard_detector_out;
    M_game_regFile_we = M_game_controlUnit_we;
    M_game_regFile_read_address_a = M_game_controlUnit_regfile_read_address_a;
    M_game_regFile_read_address_b = M_game_controlUnit_regfile_read_address_b;
    M_game_regFile_read_address_o = M_game_controlUnit_regfile_read_address_o;
    M_game_regFile_write_address = M_game_controlUnit_regfile_write_address;
    M_game_controlUnit_regfile_data_in = M_game_regFile_out_b;
    
    case (M_game_controlUnit_asel)
      2'h0: begin
        inputAlu_a = M_game_regFile_out_a;
      end
      2'h1: begin
        inputAlu_a = 4'h0;
      end
      2'h2: begin
        inputAlu_a = 4'h1;
      end
      2'h1: begin
        inputAlu_a = 4'h2;
      end
      default: begin
        inputAlu_a = 1'h0;
      end
    endcase
    
    case (M_game_controlUnit_bsel)
      3'h0: begin
        inputAlu_b = M_game_regFile_out_b;
      end
      3'h1: begin
        inputAlu_b = 4'ha;
      end
      3'h2: begin
        inputAlu_b = 8'h14;
      end
      3'h3: begin
        inputAlu_b = 8'h1e;
      end
      3'h4: begin
        inputAlu_b = 12'h200;
      end
      3'h5: begin
        inputAlu_b = 4'h5;
      end
      3'h6: begin
        inputAlu_b = 8'h63;
      end
      3'h7: begin
        inputAlu_b = 4'h1;
      end
      default: begin
        inputAlu_b = 1'h0;
      end
    endcase
    M_game_alu_a = inputAlu_a;
    M_game_alu_b = inputAlu_b;
    M_game_alu_alufn = M_game_controlUnit_alufn;
    
    case (M_game_controlUnit_wdsel)
      2'h0: begin
        M_game_regFile_data = M_game_alu_alu;
      end
      2'h1: begin
        M_game_regFile_data = M_rngGen_out;
      end
      2'h2: begin
        M_game_regFile_data = 8'h3c;
      end
      2'h3: begin
        M_game_regFile_data = M_rngGen2_out;
      end
      default: begin
        M_game_regFile_data = 1'h0;
      end
    endcase
    
    case (M_game_regFile_out_o)
      2'h0: begin
        to_alufn_out = 6'h00;
      end
      2'h1: begin
        to_alufn_out = 6'h01;
      end
      2'h2: begin
        to_alufn_out = 6'h02;
      end
      2'h3: begin
        to_alufn_out = 6'h00;
      end
      default: begin
        to_alufn_out = 1'h0;
      end
    endcase
    
    case (M_game_controlUnit_alufn_sel)
      1'h0: begin
        M_game_alu_alufn = M_game_controlUnit_alufn;
      end
      1'h1: begin
        M_game_alu_alufn = to_alufn_out;
      end
    endcase
    operand1 = M_game_regFile_operand1_out;
    operand2 = M_game_regFile_operand2_out;
    operation = M_game_regFile_operation_out;
    countdown_timer = M_game_regFile_countdown_timer_out;
    score = M_game_regFile_score_out;
    answer = M_game_regFile_answer_out;
    moduloAns = M_game_regFile_moduloAns_out;
    scoreTimer = M_game_regFile_scoreTimter_out;
    ledValue = M_game_regFile_ledvalue_out;
  end
endmodule
