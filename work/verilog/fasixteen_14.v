/*
   This file was generated automatically by Alchitry Labs version 1.2.0.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fasixteen_14 (
    input [15:0] a,
    input [15:0] b,
    input [3:0] alufn,
    output reg z,
    output reg v,
    output reg n,
    output reg [15:0] s
  );
  
  
  
  reg [15:0] out;
  reg [31:0] mout;
  
  always @* begin
    
    case (alufn[0+0-:1])
      1'h0: begin
        z = 1'h0;
        v = 1'h0;
        n = 1'h0;
        if (alufn[1+0-:1]) begin
          mout = $signed(a) * $signed(b);
          out = mout[0+15-:16];
          if ($signed(a) > 15'h7fff / $signed(b)) begin
            v = 1'h1;
          end else begin
            v = 1'h0;
          end
        end else begin
          if (alufn[2+0-:1]) begin
            out = $signed(a) / $signed(b);
          end else begin
            if (alufn[3+0-:1]) begin
              out = -$signed(a);
            end else begin
              out = a + b;
              z = (~|out);
              v = (((a[15+0-:1]) & (b[15+0-:1]) & (~out[15+0-:1])) | ((~a[15+0-:1]) & (~b[15+0-:1]) & (out[15+0-:1])));
              n = out[15+0-:1];
            end
          end
        end
      end
      1'h1: begin
        if (alufn[1+0-:1] == 1'h0) begin
          out = a - b;
          z = (~|out);
          v = (((a[15+0-:1]) & (~b[15+0-:1]) & (~out[15+0-:1])) | ((~a[15+0-:1]) & (b[15+0-:1]) & (out[15+0-:1])));
          n = out[15+0-:1];
        end else begin
          if (alufn[1+0-:1] == 1'h1) begin
            if (b != 1'h0) begin
              out = a - ((a / b) * b);
              z = (~|out);
              v = (((a[15+0-:1]) & (~b[15+0-:1]) & (~out[15+0-:1])) | ((~a[15+0-:1]) & (b[15+0-:1]) & (out[15+0-:1])));
              n = out[15+0-:1];
            end else begin
              out = a;
              z = (~|out);
              v = (((a[15+0-:1]) & (~b[15+0-:1]) & (~out[15+0-:1])) | ((~a[15+0-:1]) & (b[15+0-:1]) & (out[15+0-:1])));
              n = out[15+0-:1];
            end
          end
        end
      end
      default: begin
        out = 16'h0000;
        z = 1'h0;
        v = 1'h0;
        n = 1'h0;
      end
    endcase
    if (alufn[0+1-:2] == 2'h3) begin
      if (b != 1'h0) begin
        out = a - ((a / b) * b);
        z = (~|out);
        v = (((a[15+0-:1]) & (~b[15+0-:1]) & (~out[15+0-:1])) | ((~a[15+0-:1]) & (b[15+0-:1]) & (out[15+0-:1])));
        n = out[15+0-:1];
      end else begin
        out = a;
        z = (~|out);
        v = (((a[15+0-:1]) & (~b[15+0-:1]) & (~out[15+0-:1])) | ((~a[15+0-:1]) & (b[15+0-:1]) & (out[15+0-:1])));
        n = out[15+0-:1];
      end
    end
    s = out[0+15-:16];
  end
endmodule
